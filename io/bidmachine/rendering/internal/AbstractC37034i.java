package io.bidmachine.rendering.internal;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.text.TextUtils;
import android.util.Base64;
import io.bidmachine.rendering.model.AdElementParams;
import io.bidmachine.rendering.model.AdElementType;
import io.bidmachine.rendering.model.AdPhaseParams;
import io.bidmachine.rendering.model.AppearanceParams;
import io.bidmachine.rendering.model.CacheType;
import io.bidmachine.rendering.model.ElementLayoutParams;
import io.bidmachine.rendering.model.EventParams;
import io.bidmachine.rendering.model.EventTaskParams;
import io.bidmachine.rendering.model.EventTaskType;
import io.bidmachine.rendering.model.EventType;
import io.bidmachine.rendering.model.SideBindParams;
import io.bidmachine.rendering.model.SideType;
import java.util.HashMap;
import java.util.Map;
import net.pubnative.lite.sdk.vpaid.enums.EventConstants;

/* renamed from: io.bidmachine.rendering.internal.i */
/* loaded from: classes9.dex */
public abstract class AbstractC37034i {

    /* renamed from: a */
    public static final CacheType f97741a = CacheType.FullLoad;

    /* renamed from: b */
    public static final int f97742b = Color.parseColor("#B4FFFFFF");

    /* renamed from: c */
    public static final int f97743c = Color.parseColor("#52000000");

    /* renamed from: d */
    public static final Map f97744d = new C37035a();

    /* renamed from: io.bidmachine.rendering.internal.i$a */
    /* loaded from: classes9.dex */
    class C37035a extends HashMap {
        C37035a() {
            put("close", "iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAYAAAA9zQYyAAAMcElEQVR4Ae2d32tcxxXHj+WAFOJYanCEklomq8gvdUWRHQopjfBT8UNwMAgX+tyXQF7Sx/wBwQ8FPYjQP6AvbVHr1hTqh0KNUmwITYSrGhpiSTY2kbAhldT8kCDBud+9O8rd1f64M3fm3pm53w9MdrO7wd7sZ8+eOTP3zBEhJhxPxngyRlr3n23dH07GaOs1w63Rjf3M2Mvc/j8Zu8nYaT32SIgWR4T0A5KelFTa55NxqnW/TB5LKjhuH7Ru94R0hUK3A1mnpTp584Iojuh9V1LBGclb1F1oRGAI/P1knJbeKYLvQHBEbwj+UGocwesoNCT+gaQiT0qcQO47ksq9IzWiLkJDYqQRr0q8EvfibmvckRoQu9CQGJH4nISbTthCpSW3JOKoHavQiMJ1jMZ5gdgfSRq5oyI2oc+0BkXOB6L2TYkoHYlFaEj8E/G3zOY70YgdutAU2S7Bix2q0MyR3QKxr0uaawdFaEJjn8R5SSsXxD2I1EFVRUIS+qyk6UXdy29lg01SH0oqtveEIDR2tV2QtKZMqgNpyB/E82h9VPwGefLryXhGSNXgl/Fs6/5D8RRfIzRy5TeEUdlXvI3WPkZoRAFEZZbi/AXRGiXTr5OxKR7hk9DYQPRTSSd+TwnxHXxGDUk/ty1J5a4cX1IOphhh400K4kOExuLIZWGKETJIQbA2gMniF1IhVQut8mWmGOEDqX8kad26sry6SqGRK78mJDYardtKSntVCY2FkrNCYgVpJCaL96RkqhAaMp8REjsvSDrZL/UigjKrHPjGYvLHSka9QJsFVEBKuRK9rAhNmesLti0gr/5YSqhVlyX0L4Qy1xkl9W1xTBlCI2d+SUjdgdTOc2rXQp+XtDZJCMBWYKdSuxQadeYfCyHtjLdundSpXQmNGjMXTUgvUKd2sqLoQmj8ZV8XQvqDSSKi9K5YZEjsgvzoghCSD+ywHBWL2IzQqDWjPMddcyQv2JSGX3RrNWqbQmNzfkMI0QPlPIh9TyxgS2jVYoAQE7Dvw8ok0UYOjRyIMpOiwKHC+bQNobFHg81fSFHg0BtSkKIpB75VbMtFbKH6rxgvuhSJ0Ph5eFUIsQuC5LgYUkToy0KIG4zXMkxTDqYaxCVIPYyqHiYRGqkGrwckrjGqepgIjbyZVQ3iGjh2XjTRFRrLlLzAlZSF9uGoukJz4xEpG61Kmo7QiMzceETKRisr0BGay9ukKnK7l1doRmdSJXAvV5TOKzSjM6maXA7mEZrRmfhAriidR2hGZ+ILhYVGHZDRmfjCpAyoSw8SOvgl7kajMXL16tWfra2tvfnkyZNfY2xubv5qcXHxFYmQGrzfvnXpft1HsY7+SwmYubm57127du3N0dHR57o9v7Oz89nFixd/s7y8/D+JgBq9398m41G3J/oJHXwf5+3t7Xd6fbiKWD7kQTIr8H5nZ2cXNjY2vpJwuSk9jmrul3JoraH7Bn5iB324AK+BCBBCAiWvzACvWVhYCL2r1TlJ22YcopfQwZfq5ufn5/K+NmSpdWRWzMzMvCxhg514Xdsz9xI6+M37ExMTL+q8PkSpTWQGU1NToQsNuk4OuwmNyWAtr0YJSWpTmSNCHUzURjehT0oErK+vr4kBIUhdVOatra1PJQ4OFS2G8rwoRFZXV42EBj5LbSMyLy0tLUscHEqdOst2SLbfkghIFhieXllZebvIB+9bSc+GzHhPY2Nj70o8vCeZE7Y6I3TQpbosqLNCRnyAYohPkdqWzPh/InHRNt8b6vdk6CCyxiC1TZljWRXN0DbnizZCK0KXmjIPpGeERvulKHfWhSo1Zc4F5n0H3maFjvpgzNCkpsxanFZ3skJHv5gSitSUWZuDYNyZckSP71JTZiMO5n5K6LY8JHZ8lZoyGwN3m8vgSuhaROcsvklNmQvTLN8poaMr1+XBF6kpsxWanUqV0FFXOPpRtdSU2RpNh5XQtb6yuyqpKbNVmllGbXPoTsqWmjJbpxmUIXTtZVaUJTVldsZxCM1u/BlcS02ZnTIOoQuf3hkbrqSmzM4ZwQZ/9K7jeYNdsL0HmTI75xaEDr6hjEtsSY1byuycO8yhB2Ar/aDMpTBMoXNgQ2pTKLMWFDovVUhNmbUZhdAjQnJRptSU2QxGaE3KkJoyG8OUwwSXUlPmQgybnPVNxI3UlLk4FLoANqWmzHag0CQqKHQBbLa0DbE/tY9QaENc9Gem1MWB0PtCtHDZbJxSF2KfQmtSRud8Sm3MPlMODco8BoJSG9EUekfIQMqUWUGptdljypGDKmRWUGotmEMPwtYG/1hOEvCcptC7Qrpi8xKsELqeRsAuhe6B7QtaYzkew3OaQu8JacPV1dmU2jk7EPqRkANctxqg1E5hDp2lrL4ZlNoZj9TCSu2lLrsJDKW2zmP8Qwn9QGpMVR2NKLVVmguESuja5tFVt+ei1NZoi9C1TDl86TVHqa3QzDJqm3L41jiRUhemLUJj+bs2UdrXLqCU2hi421xPyW4frUWU9r2lLaU24mAOONTtwVgJpT8zpdbmrroz1O3BGAmt2Til1uKxupMVGnlIlFtJQ5NZQalzAW+7phwguigdqswKSj2Qtrlfp9APJSJCl1lBqfvSFoSPdDyJxo1vSSRsb2+/E7rMWWx9QWdnZxc2Nja+kjh4TzJboDsjNHLoKMp3i4uLr8QkM7AVqRcWFl6TOICrbfv5u7UxiCKPnp+fnxNDfG6caEPqmZmZlyUO7nQ+MJTnRSEyMTHxohgQQhfQolJPTU3FIvShbKKb0NGkHbqE1NK2yoOMPAGZxKHtGr06J92SwFlfX1/TeX1IMitMpd7a2vpUwqdratxLaBSqg15kWV1dzS10iDIrTKReWlpalrBBZO6aGh/p8x8FfWRyo9F4emVl5e1BlY6QZc6St6SH9zs2NvauhA1kvt7tiX7NGj+RgEGddVDkikVmkCdSZ88dD5ybvZ44Kr35MhmTyRiVQLl///7elStX3j9x4sRnp06deu7YsWPP4nHk14kA/7p06dLvbt++/blEQk3eLwoWH/V6sl/KASD0ZSHEH/4ifdZKBvWHfiA1vyKceAUmg30X/vI0PI9ioYVEwc1BL8grNLsrkarpWarLkvdIioHfDEIck8vBvEIzSpMqyRWdgc6hQYzSpCpyu6cjNL4hrHiQsskdnYHusW7Bb1oiwXFd58W6QiNCR93ugHiFdlZgcvDmP4QnZxH3wDHtedtR0Qd/0NfJaAgh7vggGVp72oHp0cjYHMKzWYgrMBE0mq8VOetbK1knRIPfiyEmKYcC20uxW29SCLEH8mbtVENRJEKrP5ypB7GFcaqhKCo0wP5UVj1IUeCQcaqhKJJySOYvwqoHKco/k3FPCmJDaLCZjJFkvCCE6IOqmZW9QjZSDgXzaWIC8mZrG99sRWjwjaQ/GT9MxlNCyGAgM/LmL8USNoUGyKeRfpwRQgaDgsJjsYhtoYE62oKTRNKPG8n4r1jGhdAAUZqLLqQXyJk/EAe4Ehpg2x+a1IwLId+Bisb74giXQgPsnabURIH9zX8Xh9gs2/UCm5hYziOY/Dnf0OY6Qis+TsZLyXhGSB2BzCjPfSOOKUtovBFKXU+UzKXs9ylLaACp/y3MqesEcuY/SgmRWVGm0ApMFLnvI356NiV3SRVCg3vCOnXMoM58QyqgKqEB6tRcUYyPG+Jo0SQPVQoNsKKI88URqYeFhAyC05/EwXK2DlULDVQT69NCqUNFVTKsbjQywQehAb7dmERg2ykni2GBpWxM/qxtAS2CL0IDtZ8acuNYY+6p9ht8TrhsChPA0spygxh0aFBVHE/Gz1u3xD+QWvxZPOwZ7lOEzoJvP37KWNrzD7QZ+Kt4eqW/rxE6C6O1HyAq/008mPj1IwShFTiq+aywElI2iMSIyh9KAIQkNECUhti8ZrEcUE5F++RgztcJTWgF8uoLwjTEFVjsQvUiuCNIQhVagUiNiE2x7aB6ZAR72GroQisodjGCF1kRi9AKiq0HUov/SETHX8cmtGI6GeeScVJIN4LNkQcRq9AKVRWZFEZttViFykW0Fy3HLnQWpCPTrVEnVDSGxNH38a6T0ApEakRsNJWMNSWBxJ9ImhvXqhl9HYXOglVHyD0tYaclkBaphBK5ticq1F3oTp6X9Ir06datr4KjzIYJHdKIuxLQSp5rKHR/EMEhNqI3ZB9t3ZZJVl51n2fa9IBCmwGp0YoBgh9vjeHWY8Mdoxv78p2UkHSv9e+7mX9XAhMNvgWcUhe4fbAitwAAAABJRU5ErkJggg==");
            put("mute", "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");
            put("unmute", "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");
            put(EventConstants.SKIP, "iVBORw0KGgoAAAANSUhEUgAAALQAAAC0CAYAAAA9zQYyAAALW0lEQVR4Ae2dz2sd1xXHj+WADHEkGhyhpJaJqLypCwU7FBJa4VXxIjgYhAtddxPoRl3mL/CiO1H6B3TTFlq3ptAsCjV2cSA0AVc1NMSSbGxQsSGV1PyQIMGZ75u5yrynmffmztw799f3AzfvWXpwHfzR0bnnnrn3mJA2zGRjLhsnivcvFO+nszFbfGa6GFUclMZ+6fX/2djLxm7xtSdCtDgmZByQ9LTk0r6UjTPF+z55KrngeH1UvO4LqYRCDwNZl8SdvE1BFEf0vi+54IzkBakLjQgMgb+djbNSnyL4DgRH9IbgjyXhCJ6i0JD4u5KLvCBxArnvSS73riREKkJDYqQRr0u8Etdxvxj3JAFiFxoSIxJfkHDTCVOotOQ9iThqxyo0onCK0bgpEPtDySN3VMQm9LliUORmIGrfkYjSkViEhsRviL9lNt+JRuzQhabIZgle7FCFZo5sF4j9ruS5dlCEJjT6JC5KXrkg9kGkDqoqEpLQ5yVPL1Ivv/UNmqQ+kFxs7wlBaHS1XZK8pkzcgTTk9+J5tD4ufoM8+c1sPC/ENfjNeL54/1g8xdcIjVz5LWFU9hVvo7WPERpRAFGZpTh/QbRGyfTLbGyLR/gkNBqIfij5wu85Ib6Df6NFyf/d/iu53M7xJeVgihE23qQgPkRobI5cFaYYIYMUBHsDWCx+Jg5xLbTKl5lihA+k/r7kdWtnebVLoZEr/0hIbCwWr05Ke66ExkbJeSGxgjQSi8UH0jMuhIbM54TEzsuSL/Z7fYigzyoHfmKx+GMlIy1wzAIqIL08id5XhKbM6YK2BeTVH0kPteq+hP6pUOaUUVLfFcv0ITRy5leFpA6ktp5T2xb6ouS1SUIAWoGtSm1TaNSZfyCEDDNXvFqpU9sSGjVmbpqQOlCntrKjaENo/GXfFELGg0UiovSeGGRKzIL86JIQ0gx0WM6KQUxGaNSaUZ5j1xxpCprS8BvdWI3apNBozl8UQvRAOQ9iPxADmBJaHTFASBvQ92FkkWgih0YORJlJV+BQ53zahNDo0eDhL6QrcOgt6UjXlAM/VTyWi5hCnb/SetOlS4TGr4fXhRCzIEjOSUu6CH1VCLFD672MtikHUw1iE6QeraoebSI0Ug0+D0hs06rq0UZo5M2sahDbwLGLoomu0Nim5AOupC+0L0fVFZqNR6RvtCppOkIjMrPxiPSNVlagIzS3t4krGrvXVGhGZ+ISuNcoSjcVmtGZuKaRg02EZnQmPtAoSjcRmtGZ+EJnoVEHZHQmvrAgE+rSk4QOfot7cXHxxPXr13+8sbHx9rNnz36Jsb29/Yu1tbXXxCKu5k2AsXXpcaePYh/9ZxIwy8vL37px48bbs7OzL1Z9f3d395PLly//+tatW/8Tg7iaNyF+k40nVd8YJ3Tw5zjv7Oy8UyeVwoZcruZNiDtSc1XzuJRDaw/dN/CrfZJUAJ9BNEVUFQO4mjcxLkh+bMYR6oQOvlS3srKy3PSzJuVyNW9ioBOv8njmOqGDb96fn59/RefzpuRyNW+CVC4Oq4TGYjDJp1FcyUWpW6EuJhqiSujTEgGbm5sb0oKucrmaN1GOFC2mmnwoRNbX11uJBbrI5WreRPnO6BdGhUayHXR1Q7G6unobpTFpSVu5XM2bKEfSjqmKD0TB1tbWF6jz9i2Xq3kTZmi9NzXum6GDTQsXcrmaN1GG1nzRRmgFpY6e2giN45ei7Kyj1FGDdd+ht2Who74Yk1JHzVn1pix09JsplDpaDoPxaMoRPZQ6Sg7XfkrooTwkdih1dMDdQT1aCZ1EdC5DqaNjUL5TQkdXrmsCpY6KwUmlSuioKxzjoNTRMHBYCZ30k92UOgoGWUayOfQolDp4BkEZQicvs4JSB88MhOZp/CUoddDMQejOt3fGBqUOlhMQmkd9VUCpg2SGQo+BUgcHc+hJUOqgmKbQDaDUwUChm0Kpg2AWQp8Q0ghK7T+M0JpQaq9hytEGSu0t023u+iZCqX2FQneAUvsHhSZRQaE7MOkulSa0uZrC1bwhQKFbQpn9BEIfCNGCMnvLAYXWhDJ7zQFTDg0os/cMhN4VMhHKHAT7TDkaQJmDgTn0JChzUAyE3hNSCWUOjj0KXQNlDpKB0PtChqDMwbILoZ8IOYQyBw1z6DKUOXieqI2V5KWmzMHzFP9RQj+ShKHMUTDYIFRCJ5tHU+ZoGIrQSaYclDkqBllGsikHZY6OoQiN7e9kojRljg64O9hPKbePJhGlKXOUHK4Bp6q+GCuUOVruqzdTVV+MEcocNU/Vm7LQyEOibCWlzFEDbytTDhBdlKbM0TO09hsV+rFEBGVOgqEgfGzkmzi48ecSCTs7O++4kMrVvInyKym1QI9GaOTQUZTv1tbWXnMhlat5EwWuDvXzVx1jEEUevbKysiwt6SKVq3kT5d7oF6aafChE5ufnX5EWdJXK1byJciSbqBI6mrRDF1dSUeZWIJM40q5Rd3LSexI4m5ubGzqfNyWVq3kTpDI1rhMaheqgN1nW19cbi2VSKlfzJgYic2VqXCc0ZP5QAmZ1dfV2kxPuTUvlat7EqE2Jxx3W+LEEzNbW1heXJ1zbYEMqV/Mmxp26bxyXej7PxkI2ZiVQHj58uH/t2rXbp06d+uTMmTMvnjx58gV8HXluJtM/r1y58tu7d+9+KoZxNW8iIDrXZg/HZDwQ+qoQ4g9/ljF7JZPOh34kiT8RTrwCi8GxG39NDjyPYqOFRMGdSR9oKjRPVyKuqS3VlWl6JcXEnwxCLNPIwaZCM0oTlzSKzkDn0iBGaeKKxu7pCI2fEFY8SN80js5A91q34JuWSHC8q/NhXaERoaM+7oB4hXZW0Obizb8Lb84i9oFj2uu246IPJvoyG4tCiD3ez4ZWbzloezUymkN4NwuxBRaCrdZrXe761krWCdHgd9KSNimHAu2l6NZbEELMgbxZO9VQdInQanKmHsQUrVMNRVehAfpTWfUgXYFDrVMNRZeUQ0p/EVY9SFf+kY0H0hETQoPtbJzIxstCiD6omhnpFTKRciiYT5M2IG821vhmKkKDryT/lfG9bDwnhEwGMiNv/lwMYVJogHwa6cc5IWQyKCg8FYOYFhqoqy24SCTjuJmN/4hhbAgNEKW56ULqQM78vljAltAAbX84pGZOCPkGVDRuiyVsCg3QO02piQL9zX8Ti5gs29WBJiaW8wgWf9Yb2mxHaMVH2Xg1G88LSRHIjPLcV2KZvoTG/wilThMlcy/9Pn0JDSD1v4Q5dUogZ/6D9BCZFX0KrcBCkX0f8QOZe38IxIXQ4IGwTh0zqDPfFAe4EhqgTs0dxfi4KZY2TZrgUmiAHUXcL45IPS0kZBCc/igWtrN1cC00UIdYnxVKHSqqkmG00agNPggN8NONRQTaTrlYDAtsZWPxZ6wFtAu+CA1UPzXkxvXC7Kn2G/w74bEpLAB7K8tNYtKlQa6YycZPilfiH0gt/iQenhnuU4Quoy7+ZGnPP3DMwF/E0yf9fY3QZRit/QBR+a/iwcJvHCEIrXgjG+eFlZC+QSRGVP5AAiAkoQGiNMTmM4v9gHIqjk8O5n6d0IRWIK++JExDbIHNLlQvgruCJFShFYjUiNgU2wzqjIxgL1sNXWgFxe5G8CIrYhFaQbH1QGrxb4no+uvYhFYsZeNCNk4LqSLYHHkSsQqtUFWRBWHUVptVqFxE+9By7EKXQTqyVIyUUNEYEkd/jndKQisQqRGxcahkrCkJJP5Y8tw4qcPoUxS6DHYdIfeShJ2WQFqkEkrkZG9USF3oUV6S/In0peLVV8FRZsOCDmnEfQloJ882FHo8iOAQG9Ebss8Wr31Slle95502NVDodkBqHMUAwWeKMV18bXpkVHEg30gJSfeLP++V/qwEJhp8Dcyx7v2OQHPbAAAAAElFTkSuQmCC");
        }
    }

    /* renamed from: a */
    public static AdPhaseParams m19172a() {
        AdPhaseParams.Builder addAdsElementParams = new AdPhaseParams.Builder().setBackgroundColor(Color.parseColor("#000000")).addAdsElementParams(new AdElementParams.Builder(AdElementType.Mraid, "MRAID", new ElementLayoutParams.Builder().build(), new AppearanceParams.Builder().build()).setSource("<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><style>.loader {position: absolute; top:50%; left:50%; border: 4px solid #00000000; border-radius: 50%; border-top: 4px solid #FFFFFF; width: 40px; height: 40px; -webkit-animation: spin 1s linear infinite; /* Safari */ animation: spin 1s linear infinite;}/* Safari */@-webkit-keyframes spin { 0% { -webkit-transform: rotate(0deg); } 100% { -webkit-transform: rotate(360deg); }}@keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); }}</style></head><body><div class=\"loader\"></div></body></html>").build());
        AdElementType adElementType = AdElementType.Image;
        ElementLayoutParams.Builder height = new ElementLayoutParams.Builder().setWidth(30.0f).setHeight(30.0f);
        SideType sideType = SideType.Right;
        ElementLayoutParams.Builder rightSideBindParams = height.setRightSideBindParams(new SideBindParams(sideType, "system"));
        SideType sideType2 = SideType.Top;
        return addAdsElementParams.addControlsElementParams(new AdElementParams.Builder(adElementType, "CLOSE", rightSideBindParams.setTopSideBindParams(new SideBindParams(sideType2, "system")).setMarginRight(-10.0f).setMarginTop(10.0f).build(), new AppearanceParams.Builder().setVisible(Boolean.FALSE).setStrokeColor(Integer.valueOf(Color.parseColor("#FFFFFF"))).setClickable(Boolean.TRUE).build()).setPlaceholder("close").build()).addControlsElementParams(new AdElementParams.Builder(AdElementType.Countdown, "COUNTDOWN", new ElementLayoutParams.Builder().setWidth(30.0f).setHeight(30.0f).setRightSideBindParams(new SideBindParams(sideType, "system")).setTopSideBindParams(new SideBindParams(sideType2, "system")).setMarginRight(-10.0f).setMarginTop(10.0f).build(), new AppearanceParams.Builder().setStrokeColor(Integer.valueOf(Color.parseColor("#FFFFFF"))).setStrokeWidth(Float.valueOf(2.0f)).build()).build()).addEventParams(new EventParams(EventType.OnImpression, "system").addTaskParams(new EventTaskParams(EventTaskType.Start, "COUNTDOWN", "3000"))).addEventParams(new EventParams(EventType.OnClick, "CLOSE").addTaskParams(new EventTaskParams(EventTaskType.Skip, "system", "true"))).addEventParams(new EventParams(EventType.OnComplete, "COUNTDOWN").addTaskParams(new EventTaskParams(EventTaskType.Show, "CLOSE", "true")).addTaskParams(new EventTaskParams(EventTaskType.Hide, "COUNTDOWN", "true"))).build();
    }

    /* renamed from: b */
    public static Bitmap m19170b(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        return m19171a((String) f97744d.get(str));
    }

    /* renamed from: a */
    public static Bitmap m19171a(String str) {
        if (TextUtils.isEmpty(str)) {
            return null;
        }
        try {
            byte[] decode = Base64.decode(str, 0);
            return BitmapFactory.decodeByteArray(decode, 0, decode.length);
        } catch (Throwable unused) {
            return null;
        }
    }
}
